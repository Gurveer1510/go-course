package main

import (
	"encoding/json"
	"fmt"
)

type Person struct {
	Name    string  `json:"name"`
	Age     int     `json:"age,omitempty"`
	Email   string  `json:"email"`
	Address Address `json:"address"`
}

type Address struct {
	City  string `json:"city"`
	State string `json:"state"`
}

func main() {
	person := Person{Name: "Gurveer", Email: "gurveer@yopmail.com"}
	jsonData, err := json.Marshal(person)
	if err != nil {
		fmt.Println("Error marshalling person:", err)
		return
	}

	fmt.Println(string(jsonData))

	person1 := Person{
		Name:  "Alia",
		Age:   30,
		Email: "alia@yopmail.com",
		Address: Address{
			City:  "Mumbai",
			State: "MH",
		},
	}
	jsonData1, err := json.Marshal(person1)
	if err != nil {
		fmt.Println("Error occurred while marshalling person1:", err)
		return
	}

	fmt.Println(string(jsonData1))

	jsonStr := `{
		"full_name" : "Jenny",
		"pop_id" : 41,
		"age" : 27,
		"address" : {
			"city" : "San Jose",
			"state" : "CA"
		}
	}`

	var jsonDump Kpop

	err = json.Unmarshal([]byte(jsonStr), &jsonDump)
	if err != nil {
		fmt.Println("Error occured while unmarshall operation", err)
		return
	}

	fmt.Printf("Unmarshalled json: \n%+v\n", jsonDump)

}

type Kpop struct {
	FullName string `json:"full_name"`
	PopId int `json:"pop_id"`
	Age int `json:"age"`
	Address Address `json:"address"`
}
